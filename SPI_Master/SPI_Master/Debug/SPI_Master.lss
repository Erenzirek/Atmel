
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c6  00000000  00000000  000001ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000637  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000216  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.SPI_MasterInit 0000000c  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.SPI_MasterTransmit 0000000a  000000b4  000000b4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000012  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_MasterInit:

000000a8 <SPI_MasterInit>:
#define MISO PORTB4 // Definition of MISO pin
#define SCK PORTB5 // Definition of SCK pin

void SPI_MasterInit() // Function to initialize SPI Master mode
{
	DDRB |= (1 << SS) | (1 << MOSI) | (1 << SCK); // Set SS, MOSI, and SCK as outputs
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	8c 62       	ori	r24, 0x2C	; 44
  ac:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Enable SPI and set as master
  ae:	81 e5       	ldi	r24, 0x51	; 81
  b0:	8c bd       	out	0x2c, r24	; 44
  b2:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

000000b4 <SPI_MasterTransmit>:
	// Prescaler: fclk/16
}

void SPI_MasterTransmit(char cData) // Function to transmit data in SPI Master mode
{
	SPDR = cData; // Transmit the data
  b4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Wait until the SPI flag becomes 1
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <SPI_MasterTransmit+0x2>
}
  bc:	08 95       	ret

Disassembly of section .text.main:

00000096 <main>:

int main(void)
{
	DDRD = 0x00; // Set Port D as input
  96:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF; // Enable pull-up resistors
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8b b9       	out	0x0b, r24	; 11
	SPI_MasterInit(); // Initialize SPI in Master mode
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <SPI_MasterInit>
	
	while (1)
	{
		SPI_MasterTransmit(PIND); // Transmit the value read from Port D
  a0:	89 b1       	in	r24, 0x09	; 9
  a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPI_MasterTransmit>
  a6:	fc cf       	rjmp	.-8      	; 0xa0 <main+0xa>

Disassembly of section .text.__dummy_fini:

000000c6 <_fini>:
  c6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000c8 <__funcs_on_exit>:
  c8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000ca <__simulator_exit>:
  ca:	08 95       	ret

Disassembly of section .text.exit:

00000080 <exit>:
  80:	ec 01       	movw	r28, r24
  82:	0e 94 64 00 	call	0xc8	; 0xc8 <__funcs_on_exit>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <_fini>
  8a:	ce 01       	movw	r24, r28
  8c:	0e 94 65 00 	call	0xca	; 0xca <__simulator_exit>
  90:	ce 01       	movw	r24, r28
  92:	0e 94 61 00 	call	0xc2	; 0xc2 <_Exit>

Disassembly of section .text._Exit:

000000c2 <_Exit>:
  c2:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
