
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c1  00000000  00000000  000001af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000224  00000000  00000000  000010a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001537  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000c0  000000c0  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_SlaveInit 0000000a  000000ac  000000ac  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_SlaveReceive 0000000a  000000b6  000000b6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000016  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 4b 00 	jmp	0x96	; 0x96 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_SlaveInit:

000000ac <SPI_SlaveInit>:
#include <avr/io.h>
#define SS PORTB2 // SS’ pini tanýmlama
#define MISO PORTB4 // MISO pini tanýmlama
void SPI_SlaveInit() // SPI Slave Modu Tanýmlama Fonksiyonu
{
	PORTB = (1 << MISO); // MISO pini çýkýþ
  ac:	80 e1       	ldi	r24, 0x10	; 16
  ae:	85 b9       	out	0x05, r24	; 5
	SPCR = (1 << SPE); // SPI etkinleþtir.
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	8c bd       	out	0x2c, r24	; 44
  b4:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

000000b6 <SPI_SlaveReceive>:
}
char SPI_SlaveReceive() // SPI Slave Modu Veri Alma Fonksiyonu
{
	while (!(SPSR & (1 << SPIF))); // Okuma iþlemi bitene kadar bekle.
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <SPI_SlaveReceive>
	return SPDR; // SPI veri kaydedicisi içeriðini döndür.
  bc:	8e b5       	in	r24, 0x2e	; 46
}
  be:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
int main(void)
{
	char rData; // Alýnan veri deðiþkeni
	DDRD = 0xFF; // PORTD tüm bitler çýkýþ.
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	SPI_SlaveInit(); // SPI Slave modunda kur.
  84:	0e 94 56 00 	call	0xac	; 0xac <SPI_SlaveInit>
	while (1)
	{
		rData = SPI_SlaveReceive(); // SPI üzerinden veri al.
  88:	0e 94 5b 00 	call	0xb6	; 0xb6 <SPI_SlaveReceive>
		PORTD = rData; // Okunan veriyi PORTD’ye yaz.
  8c:	8b b9       	out	0x0b, r24	; 11
		SPSR |= (1 << SPIF); // Kesme bayraðýný indir.
  8e:	8d b5       	in	r24, 0x2d	; 45
  90:	80 68       	ori	r24, 0x80	; 128
  92:	8d bd       	out	0x2d, r24	; 45
  94:	f9 cf       	rjmp	.-14     	; 0x88 <main+0x8>

Disassembly of section .text.__dummy_fini:

000000c8 <_fini>:
  c8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ca <__funcs_on_exit>:
  ca:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000cc <__simulator_exit>:
  cc:	08 95       	ret

Disassembly of section .text.exit:

00000096 <exit>:
  96:	ec 01       	movw	r28, r24
  98:	0e 94 65 00 	call	0xca	; 0xca <__funcs_on_exit>
  9c:	0e 94 64 00 	call	0xc8	; 0xc8 <_fini>
  a0:	ce 01       	movw	r24, r28
  a2:	0e 94 66 00 	call	0xcc	; 0xcc <__simulator_exit>
  a6:	ce 01       	movw	r24, r28
  a8:	0e 94 62 00 	call	0xc4	; 0xc4 <_Exit>

Disassembly of section .text._Exit:

000000c4 <_Exit>:
  c4:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
