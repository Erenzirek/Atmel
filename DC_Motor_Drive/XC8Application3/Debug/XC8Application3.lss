
XC8Application3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000018b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000987  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000251  00000000  00000000  000011b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000da  000000da  0000014e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000044  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000e6  000000e6  0000015a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000080 <main>:
#define stop PORTD1    // stop is assigned to PORTD1.
#define backward PORTD0 // backward is assigned to PORTD0.

int main(void)
{
	DDRB = 0xFF; // Set port B as output.
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00; // Set port D as input.
  84:	1a b8       	out	0x0a, r1	; 10

	while (1)
	{
		if (PIND & (1 << forward)) // If the forward button is pressed:
  86:	4a 9b       	sbis	0x09, 2	; 9
  88:	08 c0       	rjmp	.+16     	; 0x9a <main+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x14>
  94:	00 00       	nop
		{
			_delay_ms(10);      // Delay for 10 milliseconds.
			PORTB = 0b00000101; // Activate motor driver A. Input - 1 = HIGH, Input - 2 = LOW
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	85 b9       	out	0x05, r24	; 5
		}
		if (PIND & (1 << stop)) // If the stop button is pressed:
  9a:	49 9b       	sbis	0x09, 1	; 9
  9c:	08 c0       	rjmp	.+16     	; 0xae <main+0x2e>
  9e:	83 ec       	ldi	r24, 0xC3	; 195
  a0:	99 e0       	ldi	r25, 0x09	; 9
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x22>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x28>
  a8:	00 00       	nop
		{
			_delay_ms(10);      // Delay for 10 milliseconds.
			PORTB = 0b00000100; // Activate motor driver A. Input - 1 = Input - 2 = LOW
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	85 b9       	out	0x05, r24	; 5
		}
		if (PIND & (1 << backward)) // If the backward button is pressed:
  ae:	48 9b       	sbis	0x09, 0	; 9
  b0:	ea cf       	rjmp	.-44     	; 0x86 <main+0x6>
  b2:	83 ec       	ldi	r24, 0xC3	; 195
  b4:	99 e0       	ldi	r25, 0x09	; 9
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x36>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
		{
			_delay_ms(10);      // Delay for 10 milliseconds.
			PORTB = 0b00000110; // Activate motor driver A. Input - 1 = LOW, Input - 2 = HIGH
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	e1 cf       	rjmp	.-62     	; 0x86 <main+0x6>

Disassembly of section .text.__dummy_fini:

000000e2 <_fini>:
  e2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000e4 <__funcs_on_exit>:
  e4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e6 <__simulator_exit>:
  e6:	08 95       	ret

Disassembly of section .text.exit:

000000c4 <exit>:
  c4:	ec 01       	movw	r28, r24
  c6:	0e 94 72 00 	call	0xe4	; 0xe4 <__funcs_on_exit>
  ca:	0e 94 71 00 	call	0xe2	; 0xe2 <_fini>
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 73 00 	call	0xe6	; 0xe6 <__simulator_exit>
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 6f 00 	call	0xde	; 0xde <_Exit>

Disassembly of section .text._Exit:

000000de <_Exit>:
  de:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
